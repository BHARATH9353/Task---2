#Solving a suduko puzzles automatically


def print_grid(grid):
    for row in grid:
        print(" ".join(str(num) if num != 0 else "." for num in row))


def find_empty_location(grid):
    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                return i, j
    return None


def is_safe(grid, row, col, num):
    # Check row
    for i in range(9):
        if grid[row][i] == num:
            return False

    # Check column
    for i in range(9):
        if grid[i][col] == num:
            return False

    # Check 3x3 box
    start_row, start_col = 3 * (row // 3), 3 * (col // 3)
    for i in range(3):
        for j in range(3):
            if grid[start_row + i][start_col + j] == num:
                return False

    return True


def solve_sudoku(grid):
    empty_location = find_empty_location(grid)
    if not empty_location:
        return True  # Puzzle solved
    row, col = empty_location

    for num in range(1, 10):
        if is_safe(grid, row, col, num):
            grid[row][col] = num

            if solve_sudoku(grid):
                return True

            # Undo the current cell for backtracking
            grid[row][col] = 0

    return False


# Sample Sudoku puzzle (0 represents an empty cell)
puzzle = [
    [0, 8, 0, 7, 0, 1, 0, 3, 0],
    [4, 0, 9, 0, 0, 0, 0, 0, 0],
    [0, 5, 0, 0, 6, 0, 4, 1, 8],
    [7, 0, 0, 0, 0, 9, 0, 0, 0],
    [8, 0, 0, 6, 1, 0, 5, 0, 0],
    [0, 3, 5, 0, 0, 0, 0, 2, 9],
    [0, 6, 0, 4, 0, 7, 0, 9, 0],
    [1, 0, 0, 0, 0, 8, 0, 0, 4],
    [0, 2, 0, 0, 5, 0, 0, 7, 0]
]

print("Sudoku puzzle:")
print_grid(puzzle)

if solve_sudoku(puzzle):
    print("\nSolved Sudoku:")
    print_grid(puzzle)
else:
    print("No solution exists.")
